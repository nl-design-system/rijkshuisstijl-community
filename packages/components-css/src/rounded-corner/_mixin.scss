@use "sass:map";

// Map corners to their corresponding border properties and opposites
$rhc-rounded-border-corner-map: (
  "start-start": (
    "properties": (
      "border-block-start-width",
      "border-inline-start-width",
    ),
    "opposite": (
      "border-block-end-width",
      "border-inline-end-width",
    ),
  ),
  "start-end": (
    "properties": (
      "border-block-start-width",
      "border-inline-end-width",
    ),
    "opposite": (
      "border-block-end-width",
      "border-inline-start-width",
    ),
  ),
  "end-start": (
    "properties": (
      "border-block-end-width",
      "border-inline-start-width",
    ),
    "opposite": (
      "border-block-start-width",
      "border-inline-end-width",
    ),
  ),
  "end-end": (
    "properties": (
      "border-block-end-width",
      "border-inline-end-width",
    ),
    "opposite": (
      "border-block-start-width",
      "border-inline-start-width",
    ),
  ),
  "top-left": (
    "properties": (
      "border-block-start-width",
      "border-inline-start-width",
    ),
    "opposite": (
      "border-block-end-width",
      "border-inline-end-width",
    ),
  ),
  "top-right": (
    "properties": (
      "border-block-start-width",
      "border-inline-end-width",
    ),
    "opposite": (
      "border-block-end-width",
      "border-inline-start-width",
    ),
  ),
  "bottom-left": (
    "properties": (
      "border-block-end-width",
      "border-inline-start-width",
    ),
    "opposite": (
      "border-block-start-width",
      "border-inline-end-width",
    ),
  ),
  "bottom-right": (
    "properties": (
      "border-block-end-width",
      "border-inline-end-width",
    ),
    "opposite": (
      "border-block-start-width",
      "border-inline-start-width",
    ),
  ),
) !default;

@mixin add-border($corner, $color, $width) {
  @include border-width($corner, $width);

  --_rhc-rounded-corner-border-color: $color;
  --_rhc-rounded-corner-border-style: var(--rhc-rounded-corner-border-style, solid);
}

// Mixin to set border width for a given corner and reset the opposite corner
@mixin border-width($corner, $width) {
  $rhc-rounded-border-corner-data: map.get($rhc-rounded-border-corner-map, $corner) !default;

  @include reset-border-width;

  @if $rhc-rounded-border-corner-data {
    // Apply border widths to the specified corner
    @each $prop in map.get($rhc-rounded-border-corner-data, "properties") {
      #{$prop}: $width;
    }

    // Reset opposite corner widths if required
    @each $prop in map.get($rhc-rounded-border-corner-data, "opposite") {
      #{$prop}: 0;
    }
  }
}

@mixin reset-border-width {
  border-block-end-width: 0;
  border-block-start-width: 0;
  border-inline-end-width: 0;
  border-inline-start-width: 0;
}

@mixin reset-border-radius {
  border-end-end-radius: 0;
  border-end-start-radius: 0;
  border-start-end-radius: 0;
  border-start-start-radius: 0;
}
