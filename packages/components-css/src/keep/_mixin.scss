@use "sass:string";

@mixin colored-edges-variant($corner, $color) {
  @include border-width($corner, var(--rhc-keep-colored-variant-#{$color}-corner-border-width));

  border-color: var(--rhc-keep-colored-variant-#{$color}-corner-border-color);
  border-radius: var(--rhc-keep-colored-variant-#{$color}-corner-border-radius);
  border-style: var(--rhc-keep-colored-variant-#{$color}-corner-border-style);
  padding: var(--rhc-colored-variant-#{$color}-corner-padding);
}

@mixin colored-background-variant($corner, $color) {
  @include border-width($corner, var(--rhc-keep-colored-variant-#{$color}-full-background-border-width));

  background-color: var(--rhc-keep-colored-variant-#{$color}-full-background-background-color);
  border-radius: var(--rhc-keep-colored-variant-#{$color}-full-background-border-radius);
  border-style: var(--rhc-keep-colored-variant-#{$color}-full-background-border-style);
  padding: var(--rhc-keep-colored-variant-#{$color}-full-background-padding);
}

@mixin colored-rectangle-edge($side, $color) {
  border-color: var(--rhc-keep-colored-variant-#{$color}-rectangle-border-border-color);
  border-style: var(--rhc-keep-colored-variant-#{$color}-rectangle-border-border-style);

  // Reset all border widths
  border-block-start-width: 0;
  border-block-end-width: 0;
  border-inline-start-width: 0;
  border-inline-end-width: 0;

  @if string.index($side, "block") == 1 {
    padding: var(--rhc-keep-colored-variant-#{$color}-rectangle-border-adjacent-padding);
  } @else if string.index($side, "inline") == 1 {
    padding: var(--rhc-keep-colored-variant-#{$color}-rectangle-border-perpendicular-padding);
  }

  border-#{$side}-width: var(--rhc-keep-colored-variant-#{$color}-rectangle-border-border-width);
}

// Map corners to their corresponding border properties and opposites
$corner-map: (
  "start-start": (
    "properties": (
      "border-block-start-width",
      "border-inline-start-width",
    ),
    "opposite": (
      "border-block-end-width",
      "border-inline-end-width",
    ),
  ),
  "start-end": (
    "properties": (
      "border-block-start-width",
      "border-inline-end-width",
    ),
    "opposite": (
      "border-block-end-width",
      "border-inline-start-width",
    ),
  ),
  "end-start": (
    "properties": (
      "border-block-end-width",
      "border-inline-start-width",
    ),
    "opposite": (
      "border-block-start-width",
      "border-inline-end-width",
    ),
  ),
  "end-end": (
    "properties": (
      "border-block-end-width",
      "border-inline-end-width",
    ),
    "opposite": (
      "border-block-start-width",
      "border-inline-start-width",
    ),
  ),
  "top-left": (
    "properties": (
      "border-block-start-width",
      "border-inline-start-width",
    ),
    "opposite": (
      "border-block-end-width",
      "border-inline-end-width",
    ),
  ),
  "top-right": (
    "properties": (
      "border-block-start-width",
      "border-inline-end-width",
    ),
    "opposite": (
      "border-block-end-width",
      "border-inline-start-width",
    ),
  ),
  "bottom-left": (
    "properties": (
      "border-block-end-width",
      "border-inline-start-width",
    ),
    "opposite": (
      "border-block-start-width",
      "border-inline-end-width",
    ),
  ),
  "bottom-right": (
    "properties": (
      "border-block-end-width",
      "border-inline-end-width",
    ),
    "opposite": (
      "border-block-start-width",
      "border-inline-start-width",
    ),
  ),
);

// Mixin to set border width for a given corner and reset the opposite corner
@mixin border-width($corner, $width) {
  $corner-data: map-get($corner-map, $corner);

  @if $corner-data {
    // Apply border widths to the specified corner
    @each $prop in map-get($corner-data, "properties") {
      #{$prop}: $width;
    }

    // Reset opposite corner widths if required
    @each $prop in map-get($corner-data, "opposite") {
      #{$prop}: 0;
    }
  }
}
